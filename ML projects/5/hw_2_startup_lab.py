# -*- coding: utf-8 -*-
"""HW 2 Startup Lab

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1It1ofR9Kt3e0DzvZr66PW3SNFPdagwPs

# Schelling Segregation Models

The purpose of this lab is to get you started on this week's homework assignment.

Your goal is to build a model of the Schelling segregation simulation.

To do this, we will use:

* list comprehensions
* lambda functions
* classes
* class inheritance
"""

# Commented out IPython magic to ensure Python compatibility.
# this cell contains some of the libraries that you need to run this model
import random
import matplotlib.pyplot as plt
from IPython import display
import time
# %matplotlib inline
random.seed(10) # for reproducible random numbers

"""# Problem 1

Define a class called `Agent` using a constructor.

The constructor should take 2 arguments that provide attributes called `x` and `y` for the *x-* and *y*-locations of the objects that we create. 

In the cell below, we have incorrect code that you will need to correct to properly define the class. There are 5 errors in the code (or more, depending on how you count instances of the same error). 
"""

class Agent():
    def __init__(self, xlocation, ylocation):
        self.x = xlocation
        self.y = ylocation

"""# Problem 2

In the code cell below is a function for plotting the agents we'll create. Don't worry, you won't need to know anything about plotting! All you have to do is use your knowledge of list methods to add the *x-* and *y-*coordinates of the `agent_to_be_plotted` to our lists of coordinates to plot.
"""

def map_an_agent(agent_to_be_plotted):
    agents_XCoordinate = [] # this is an empty list that will store our X-coordinates, don't change this command
    agents_YCoordinate = [] # this is an empty list that will store our y-coordinates, don't change this command
    
    agents_XCoordinate.append(agent_to_be_plotted.x)### in this line add the x attribute of the agent to be plotted to the list agents_XCoordinate. There's a built in list method - you don't need a loop
    agents_YCoordinate.append(agent_to_be_plotted.y)### in this line add the y attribute of the agent to be plotted to the list agents_XCoordinate. There's a built in list method - you don't need a loop
    
    fig, ax = plt.subplots(figsize=(5, 5))
    ax.set_facecolor('azure')
    ax.plot(agents_XCoordinate, agents_YCoordinate, 'o', markerfacecolor='purple')
    plt.xlim(-5,105)
    plt.ylim(-5,105)
    ax.set_title("Here's our map of the agents we have created:")
    plt.show()

"""# Problem 3

In the code cell below, create an instance of the class `Agent` and assign it to a variable called `agent1`.

Give your agent an *x*-position of 22 and a *y*-position of 55.

Then, call the `map_an_agent` function to produce a map.  The map that gets made should look like Plot1 in the pdf that comes with this assignment.
"""

### initialize one agent
agent1 = Agent(22,55)
#agent1.x = 22
#agent1.y = 55
map_an_agent(agent1)
### call the function from the prior cell to draw a map of where your agent is

"""Now, instantiate another object from the class `Agent` and assign it to a variable called `agent2`.

Give this agent an *x-*position of 66 and a *y-*position of 88.

Again, call the `map_an_agent` function to produce a map.  The map that gets made should look like Plot2 in the pdf that comes with this assignment.
"""

agent2 = Agent(66,88) 
### call the function to map this agent
map_an_agent(agent2)

"""# Problem 4

Did you notice that we can only map one agent at a time with our prior function? Let's modify our function so it will map all our agents.

The way that we can do this is by passing a list of agents as the input argument for this function. Last time we directly added the attributes into the `agents_XCoordinate` and `agents_YCoordinate` lists.  Let's change that command so that it adds the attributes of *all* the objects in a list.  

There are a couple of ways to do this, but for now you can use a `for` loop.
"""

def map_all_agents(listofagents):  ### what arguments should go in this function?

    agents_XCoordinate = [] # this is an empty list that will store our X-coordinates, don't change this command
    agents_YCoordinate = [] # this is an empty list that will store our y-coordinates, don't change this command
    
    ### use a for loop to add all the x attributes from our list of objects to the agents_XCoordinate list and all the y attributes from our list of objects to the agents_YCoordinate list 
    #listofagents = [agent1, agent2,agent3]
    for agent in listofagents:
      agents_XCoordinate.append(agent.x)
      agents_YCoordinate.append(agent.y)

    fig, ax = plt.subplots(figsize=(5, 5))
    ax.set_facecolor('azure')
    ax.plot(agents_XCoordinate, agents_YCoordinate, 'o', markerfacecolor='purple')
    plt.xlim(-5,105)
    plt.ylim(-5,105)
    ax.set_title("Here's our map of the agents we have created:")
    plt.show()

"""# Problem 5

Now, add the two agents we have created to a list. lets call it `agents_list`.

Then, use the function we just created to map those agents. The map you generate should be identical to Plot3 in the pdf.
"""

agents_list = [agent1, agent2]### add the agents we have created previously to this list
### use the function we just created to map our agents
map_all_agents(agents_list)

"""Look at the following cell. What do you think will happen when you run it? What will happen if you run it twice? Or three times? What if I told you it would print 73 each time you tried it. Go ahead and try it."""

random.seed(10)
print(random.randint(0,100))

"""It prints 73, because thats the first random number generated with that command if we use random.seed(10). This is how we will make sure that we have the same output even though the model requires random numbers to move.

# Problem 6

Below is a function that randomly updates the attribute of each agent in our list - but I made a mistake in constructing that function. I also made a mistake in how I called the functions in that cell. If you fix those you should see a plot equivalent to Plot4 in the pdf. 

If you compare Plot3 and Plot4 you will see that the agents moved to their newly defined positions!
"""

random.seed(32)
def moveagents(listofagents):
    for each_agent in listofagents:
        each_agent.x = random.randint(0,100)
        each_agent.y = random.randint(0,100)
moveagents(agents_list)
map_all_agents(agents_list)

"""# Problem 7

Now let's do something fun. 

Let's move the agents and map them 10 times in a row.

Write a loop that will implement these commands. Not every command has to go inside the loop. If your agents aren't 'moving' or your final map doesn't match Plot5 in the pdf, then your order is wrong. Think about the logical way to execute the loop so that the final position of the agents are mapped.
"""

### put these commands into a loop that implement them 10 times
# not all commands have to go in the loop
# these commands are not necessarily in the right order
random.seed(66)
for i in range(10):
  map_all_agents(agents_list)
  moveagents(agents_list)
  time.sleep(1) # keep this command 4th
  display.clear_output(wait=True) # keep this command last

"""# Problem 8

Let's make the above loop a function that we can use on any list. 

Call your function `make_agents_dance`.

What arguments should you use for this function if you want it to be generalizabe, meaning it can map *any* list of agents? 

Also, make the function capable of running for any specified number of steps instead of just 10.

Don't forget to make sure that the last graph stays on the screen.  
"""

def make_agents_dance(agents_list, num_steps = 10):
  for i in range(num_steps):
    moveagents(agents_list)
    map_all_agents(agents_list)
    time.sleep(1) # keep this command 4th
    display.clear_output(wait=True) 
make_agents_dance(agents_list, 5)

"""# Problem 9

Now, use a list comprehension to make 12 agents within a list called `New_List_of_Agents`. 

Remember that all you need to do make an object of the class `Agent` is provide an *x-*and a *y-*location. Lets use `random.randint(0,100)` to provide each of those values. 

Check your final output against Plot6 in the pdf.
"""

random.seed(44)
#list_comprehension - [what we wanna do , for loop, condition]
New_List_of_Agents = [Agent(random.randint(0,100),random.randint(0,100)) for i in range(12)]  ### make 12 agents; use a list comprehension
make_agents_dance(New_List_of_Agents, 10)

"""# Problem 10

Now let's make a subclass of `Agent` called `AgentNew`.  `AgentNew`, in addition to its *x-* and *y-*coordinate attributes, should also have attributes called 'status' and 'group' that will keep track of which group each instance of `AgentNew` is part of - 'happy' or 'unhappy'.

Use `status="unhappy"` in the constructor to establish a default value of 'unhappy'.

There are several errors in the code for defining the class below. Once you have fixed those errors, write a command to print the *x-*coordinate, *y-*coordinate, and group of the last agent in your list. 

They should be 28, 87, and purple, respectively.
"""

class AgentNew(Agent):
    def __init__(self,xlocation, ylocation, group, status="unhappy") :
        super().__init__( xlocation, ylocation)
        self.group = group
        self.status = status
random.seed(23)
groups = ["Purple", "Gold"]
list_of_NewAgents = [AgentNew(random.randint(0,100), random.randint(0,100), random.choice(groups)) for x in range(35)]

print(list_of_NewAgents[-1].x, list_of_NewAgents[-1].y , list_of_NewAgents[-1].group)

"""# ...continue...

You need this code for your homework. Copy it to wherever you are working or continue working in this notebook.
"""